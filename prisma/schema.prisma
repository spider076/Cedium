// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  image     String?
  email     String     @unique
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  blogs     Blog[]
  comments  Comment[]
  likes     Like[]
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  updatedAt   DateTime   @updatedAt
  blogImage   String?
  comments    Comment[]
  likes       Like[]
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookmarks   Bookmark[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Bookmark {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId Int
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, blogId])
}
